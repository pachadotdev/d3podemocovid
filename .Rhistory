library(readr)
library(dplyr)
library(canadamaps)
library(rmapshaper)
library(sf)
url <- "https://health-infobase.canada.ca/src/data/covidLive/vaccination-coverage-map.csv"
csv <- paste0("dev/", gsub(".*/", "", url))
if (!file.exists(csv)) download.file(url, csv)
vaccination_coverage <- read_csv(csv) %>%
filter(pruid != 1) %>%
select(pruid, proptotal_atleast1dose)
cduid_pruid <- census_divisions %>%
as_tibble() %>%
select(!!!syms(c("pruid", "prname"))) %>%
distinct()
# from canadamaps
provinces_map <- ms_dissolve(
input = st_as_sf(census_divisions) %>%
select(!!!syms(c("pruid", "geometry"))),
field = "pruid"
) %>%
as_tibble() %>%
left_join(cduid_pruid, by = "pruid") %>%
select(!!!syms(c("pruid", "prname", "geometry")))
provinces_map
class(st_as_sf(provinces_map))
provinces_map <- st_as_sf(provinces_map)
st_write(provinces_map, "dev/provinces_map.geojson")
geojsonio::geo2topo("dev/provinces_map.geojson")
geojsonio::geo2topo("dev/provinces_map.geojson")
provinces_map <- geojsonio::geojson_read("dev/provinces_map.geojson")
geojsonio::geo2topo(provinces_map)
library(readr)
library(dplyr)
library(canadamaps)
library(rmapshaper)
library(sf)
url <- "https://health-infobase.canada.ca/src/data/covidLive/vaccination-coverage-map.csv"
csv <- paste0("dev/", gsub(".*/", "", url))
if (!file.exists(csv)) download.file(url, csv)
vaccination_coverage <- read_csv(csv) %>%
filter(pruid != 1) %>%
select(pruid, proptotal_atleast1dose)
cduid_pruid <- census_divisions %>%
as_tibble() %>%
select(!!!syms(c("pruid", "prname"))) %>%
distinct()
# from canadamaps
provinces_map <- ms_dissolve(
input = st_as_sf(census_divisions) %>%
select(!!!syms(c("pruid", "geometry"))),
field = "pruid"
) %>%
as_tibble() %>%
left_join(cduid_pruid, by = "pruid") %>%
select(!!!syms(c("pruid", "prname", "geometry")))
# there must be a better way!
save_as_topojson <- function(x, y, aggregation = "commune") {
if (!file.exists(y)) {
if (aggregation == "commune") {
x <- x %>% select(starts_with("codigo_"), geometry)
}
geojsonio::topojson_write(
input = x,
file = y,
object_name = str_replace_all(y,".*[:alnum:]/|.geojson|.topojson", ""),
overwrite = F
)
}
}
save_as_topojson <- function(x, y, aggregation = "commune") {
if (!file.exists(y)) {
geojsonio::topojson_write(
input = x,
file = y,
object_name = str_replace_all(y,".*[:alnum:]/|.geojson|.topojson", ""),
overwrite = F
)
}
}
save_as_topojson(provinces_map, "dev/provinces_map.topojson")
library(readr)
library(dplyr)
library(canadamaps)
library(rmapshaper)
library(sf)
url <- "https://health-infobase.canada.ca/src/data/covidLive/vaccination-coverage-map.csv"
csv <- paste0("dev/", gsub(".*/", "", url))
if (!file.exists(csv)) download.file(url, csv)
vaccination_coverage <- read_csv(csv) %>%
filter(pruid != 1) %>%
select(pruid, proptotal_atleast1dose)
cduid_pruid <- census_divisions %>%
as_tibble() %>%
select(!!!syms(c("pruid", "prname"))) %>%
distinct()
# from canadamaps
provinces_map <- ms_dissolve(
input = st_as_sf(census_divisions) %>%
select(!!!syms(c("pruid", "geometry"))),
field = "pruid"
) %>%
as_tibble() %>%
left_join(cduid_pruid, by = "pruid") %>%
select(!!!syms(c("pruid", "prname", "geometry")))
# there must be a better way!
provinces_map <- st_as_sf(provinces_map)
st_write(provinces_map, "dev/provinces_map.geojson")
provinces_map <- geojsonio::geojson_read("dev/provinces_map.geojson")
geojsonio::geo2topo(provinces_map)
library(readr)
library(dplyr)
library(canadamaps)
library(rmapshaper)
library(sf)
url <- "https://health-infobase.canada.ca/src/data/covidLive/vaccination-coverage-map.csv"
csv <- paste0("dev/", gsub(".*/", "", url))
if (!file.exists(csv)) download.file(url, csv)
vaccination_coverage <- read_csv(csv) %>%
filter(pruid != 1) %>%
select(pruid, proptotal_atleast1dose)
cduid_pruid <- census_divisions %>%
as_tibble() %>%
select(!!!syms(c("pruid", "prname"))) %>%
distinct()
# from canadamaps
provinces_map <- ms_dissolve(
input = st_as_sf(census_divisions) %>%
select(!!!syms(c("pruid", "geometry"))),
field = "pruid"
) %>%
as_tibble() %>%
left_join(cduid_pruid, by = "pruid") %>%
select(!!!syms(c("pruid", "prname", "geometry")))
# there must be a better way!
provinces_map <- st_as_sf(provinces_map)
provinces_map
library(readr)
library(dplyr)
library(canadamaps)
library(rmapshaper)
library(sf)
url <- "https://health-infobase.canada.ca/src/data/covidLive/vaccination-coverage-map.csv"
csv <- paste0("dev/", gsub(".*/", "", url))
if (!file.exists(csv)) download.file(url, csv)
vaccination_coverage <- read_csv(csv)
vaccination_coverage
library(jsonlite)
provinces_map <- fromJSON("dev/provinces.topojson", simplifyVector = F)
use_data(vaccination_coverage)
use_data(provinces_map)
library(d3po)
vaccination_coverage
vaccination_coverage
vaccination_coverage %>%
filter(week_end == as.Date("2023-04-23"), pruid != 1) %>%
select(pruid, proptotal_atleast1dose)
vaccination_coverage
vaccination_coverage <- vaccination_coverage %>%
filter(week_end == as.Date("2023-04-23"), pruid != 1) %>%
select(prename, proptotal_atleast1dose)
vaccination_coverage
d3po(vaccination_coverage) %>%
po_geomap(daes(group = prename, color = proptotal_atleast1dose), map = provinces_map) %>%
po_title("fill")
library(readr)
library(dplyr)
library(jsonlite)
library(d3po)
url <- "https://health-infobase.canada.ca/src/data/covidLive/vaccination-coverage-map.csv"
csv <- paste0("dev/", gsub(".*/", "", url))
if (!file.exists(csv)) download.file(url, csv)
vaccination_coverage <- read_csv(csv)
# %>%
#   filter(pruid != 1) %>%
#   select(pruid, proptotal_atleast1dose)
provinces_map <- fromJSON("dev/provinces.topojson", simplifyVector = F)
# use_data(vaccination_coverage, overwrite = T)
#
# use_data(provinces_map, overwrite = T)
vaccination_coverage <- vaccination_coverage %>%
filter(week_end == as.Date("2023-04-23"), pruid != 1) %>%
select(prname = prename, proptotal_atleast1dose)
d3po(vaccination_coverage) %>%
po_geomap(daes(group = prename, color = proptotal_atleast1dose), map = provinces_map) %>%
po_title("fill")
d3po(vaccination_coverage) %>%
po_geomap(daes(group = prname, color = proptotal_atleast1dose), map = provinces_map) %>%
po_title("fill")
library(canadamaps)
library(readr)
library(dplyr)
library(jsonlite)
library(rmapshaper)
library(canadamaps)
library(d3po)
url <- "https://health-infobase.canada.ca/src/data/covidLive/vaccination-coverage-map.csv"
csv <- paste0("dev/", gsub(".*/", "", url))
if (!file.exists(csv)) download.file(url, csv)
vaccination_coverage <- read_csv(csv)
# %>%
#   filter(pruid != 1) %>%
#   select(pruid, proptotal_atleast1dose)
provinces <- get_provinces() %>%
st_as_sf() %>%
ms_simplify(keep = 0.5)
topojson_write(provinces, file = "dev/provinces.topojson", crs = 4326, object_name = "provinces")
library(geojsonio)
topojson_write(provinces, file = "dev/provinces.topojson", object_name = "provinces")
provinces_map <- fromJSON("dev/provinces.topojson", simplifyVector = F)
provinces <- get_provinces() %>%
st_as_sf() %>%
ms_simplify(keep = 0.3)
topojson_write(provinces, file = "dev/provinces.topojson", object_name = "provinces")
provinces_map <- fromJSON("dev/provinces.topojson", simplifyVector = F)
use_data(vaccination_coverage, overwrite = T)
use_data(provinces_map, overwrite = T)
vaccination_coverage <- vaccination_coverage %>%
filter(week_end == as.Date("2023-04-23"), pruid != 1) %>%
select(prname = prename, proptotal_atleast1dose)
d3po(vaccination_coverage) %>%
po_geomap(daes(group = prname, color = proptotal_atleast1dose), map = provinces_map) %>%
po_title("fill")
provinces_map[[1]]
maps$south_america[[1]]
maps$south_america[[2]]
provinces_map[[2]]
head(provinces_map[[2]])
topojson_write(provinces, file = "dev/provinces.topojson", object_name = "default")
provinces_map <- fromJSON("dev/provinces.topojson", simplifyVector = F)
provinces_map[[2]]$default$geometries
d3po(vaccination_coverage) %>%
po_geomap(daes(group = prname, color = proptotal_atleast1dose), map = provinces_map) %>%
po_title("fill")
vaccination_coverage
library(readr)
library(dplyr)
library(jsonlite)
library(rmapshaper)
library(canadamaps)
library(d3po)
library(geojsonio)
url <- "https://health-infobase.canada.ca/src/data/covidLive/vaccination-coverage-map.csv"
csv <- paste0("dev/", gsub(".*/", "", url))
if (!file.exists(csv)) download.file(url, csv)
vaccination_coverage <- read_csv(csv)
# %>%
#   filter(pruid != 1) %>%
#   select(pruid, proptotal_atleast1dose)
provinces <- get_provinces() %>%
st_as_sf() %>%
ms_simplify(keep = 0.3)
topojson_write(provinces, file = "dev/provinces.topojson", object_name = "default")
provinces_map <- fromJSON("dev/provinces.topojson", simplifyVector = F)
use_data(vaccination_coverage, overwrite = T)
use_data(provinces_map, overwrite = T)
vaccination_coverage <- vaccination_coverage %>%
filter(week_end == as.Date("2023-04-23"), pruid != 1) %>%
select(pruid, prname = prename, proptotal_atleast1dose)
vaccination_coverage
provinces_map$objects$default$geometries[[1]]
provinces_map$objects$default$geometries[[1]]$properties$prname
provinces_map$objects$default$geometries[[1]]$type
provinces_map$objects$default$geometries[[1]]$properties$prname
